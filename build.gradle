group = 'com.parasuram.test'
version = '1.0-SNAPSHOT'

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'net.wasdev.wlp.gradle.plugins:liberty-gradle-plugin:1.0'
        classpath files('gradle/wlp-anttasks.jar')
        classpath 'org.cloudfoundry:cf-gradle-plugin:1.1.2'
    }
}

apply plugin: 'war'
apply plugin: 'liberty'
apply plugin: 'cloudfoundry'

sourceCompatibility = 1.8
targetCompatibility = 1.8

compileJava.options.encoding = 'UTF-8'

ext {
    appName = 'LibertyProject'
    testServerHttpPort = 9080
    testServerHttpsPort = 9443
    serverDirectory = "${buildDir}/wlp/usr/servers/defaultServer"
    warContext = "${appName}"
    packageFile = "${project.buildDir}/${appName}.zip"
    packagingType = 'usr'
    // Cloud Foundry/Bluemix properties
    // This is the host for your app in Bluemix and what it will be called in the dashboard.
    cfHost = appName
    cfContext = 'mybluemix.net'
    cfTarget = 'https://api.ng.bluemix.net'
    cfSpace = 'dev'
    cfContextRoot = "${cfHost}.${cfContext}/${warContext}"

    // The Cloud Foundry or Bluemix organization, username and password can be entered here.
    // cfOrg = ''
    // cfUsername = ''
    // cfPassword = ''
}

repositories {
    mavenCentral()
}

dependencies {
    testCompile ('junit:junit:4.12') 
    testCompile ('org.apache.cxf:cxf-rt-rs-client:3.1.11') 
    testCompile ('org.glassfish:javax.json:1.0.4') 
    providedCompile ('javax.servlet:javax.servlet-api:3.1.0') 
    providedCompile ('com.ibm.websphere.appserver.api:com.ibm.websphere.appserver.api.servlet:1.0.10') 
    compile ('org.springframework.boot:spring-boot-starter-web:1.3.0.RELEASE') {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
    } 
}

test {
    reports.html.destination = file("$buildDir/reports/unit")
    reports.junitXml.destination = file("$buildDir/test-results/unit")
    exclude '**/it/**'
}

task integrationTest(type: Test) {
    group 'Verification'
    description 'Runs the integration tests.'
    reports.html.destination = file("$buildDir/reports/it")
    reports.junitXml.destination = file("$buildDir/test-results/it")
    include '**/it/**'
    exclude '**/unit/**'

    systemProperties = ['liberty.test.port': testServerHttpPort, 'war.context': warContext]
}

task printMessageAboutRunningServer {
    doLast {
        println "The server is now running at http://localhost:${testServerHttpPort}/${warContext}"
        println "To stop the server run 'gradle libertyStop'"
    }
}

task publishServerConfig(type: Copy) {
    from 'src/main/liberty/config/'
    into serverDirectory
}

task publishWar(type: Copy) {
    from(war)
    into("${serverDirectory}/dropins")
}

task createServerBootstrap() {
    outputs.file("${serverDirectory}/bootstrap.properties")
    doLast {
        def bootstrapProperties = file("${serverDirectory}/bootstrap.properties")
        if (!bootstrapProperties.exists()) {
            bootstrapProperties << "default.http.port=${testServerHttpPort}\ndefault.https.port=${testServerHttpsPort}"
        }
    }
}

liberty {
    install {
        runtimeUrl = "http://repo1.maven.org/maven2/com/ibm/websphere/appserver/runtime/wlp-webProfile7/17.0.0.1/wlp-webProfile7-17.0.0.1.zip"
    }
    packageLiberty {
        archive = packageFile
        include = packagingType
    }
}

task libertyStartTestServer(type: net.wasdev.wlp.gradle.plugins.tasks.StartTask){
    description 'Starts the WebSphere Liberty Profile server for testing.'
    logging.level = LogLevel.INFO
}

task checkBluemixPropertiesSet() {
    doLast {
        checkPropertySet('cfOrg')
        checkPropertySet('cfUsername')
        checkPropertySet('cfPassword')
    }
}

task printBluemixProperties(dependsOn: 'checkBluemixPropertiesSet') {
    doLast {
        println "Running bluemix profile with the following properties:\n" +
                "\tcf.target=${cfTarget}\n" +
                "\tcf.space=${cfSpace}\n" +
                "\tcf.org=${cfOrg}\n" +
                "\tcf.username=${cfUsername}\n" +
                "The application will be accessed at context root ${cfContextRoot}"
    }
}

def checkPropertySet(propertyName) {
    if (!project.hasProperty(propertyName)) {
        throw new GradleException("The ${propertyName} property must be provided to run the cfPush task, this can be supplied on the command line with -P${propertyName}=<value>.")
    }
}

cloudfoundry {
    target = cfTarget
    if (project.hasProperty('cfOrg')) {
        organization = cfOrg
    }
    space = cfSpace
    file = file(packageFile)
    memory = 512
    appName = cfHost
}

tasks.create('setupServer')
check.dependsOn 'integrationTest'
setupServer.dependsOn 'installLiberty', 'createServerBootstrap', 'publishServerConfig', 'publishWar'
publishServerConfig.mustRunAfter 'installLiberty'
createServerBootstrap.mustRunAfter 'publishServerConfig'
publishWar.mustRunAfter 'installLiberty'
publishWar.dependsOn 'war'
libertyStart.dependsOn 'setupServer'
integrationTest.dependsOn 'libertyStartTestServer', 'testClasses'
integrationTest.finalizedBy 'libertyStop'
libertyStartTestServer.dependsOn 'setupServer'
assemble.dependsOn 'libertyPackage'
libertyPackage.dependsOn 'setupServer'
cfPush.dependsOn 'printBluemixProperties'
libertyStart.finalizedBy 'printMessageAboutRunningServer'
